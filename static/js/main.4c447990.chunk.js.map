{"version":3,"sources":["context/reducer.js","context/types.js","context/Context.js","theme.js","components/Header/CurrencySelector.jsx","components/Header/Header.jsx","api/api.js","components/PizzaList/PizzaCard.jsx","components/PizzaList/PizzaList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["CURRENCY","RUB","name","sign","USD","EUR","initialState","catalogue","currency","user","delivery_cost","order","reducer","state","action","type","payload","pizza_id","price_RUB","price_USD","price_EUR","push","count","filter","el","Context","createContext","ContextProvider","children","useReducer","dispatch","Provider","value","theme","createMuiTheme","palette","primary","main","deepPurple","contrastText","secondary","amber","A400","useStyles","makeStyles","root","background","borderColor","color","backgroundColor","fontWeight","label","selected","CurrenySelector","useContext","useState","selectedCurrency","setSelectedCurrency","classes","ToggleButtonGroup","size","exclusive","aria-label","onChange","e","newCurrency","ToggleButton","Header","badgeContent","length","map","reduce","acc","cur","AppBar","position","Toolbar","to","style","flexGrow","textDecoration","Typography","variant","CurrencySelector","Button","IconButton","edge","Badge","API_URL","fetchApi","url","options","Promise","resolve","reject","fetch","then","response","status","json","data","catch","res","error","api","get","mode","credentials","headers","post","method","body","JSON","stringify","PizzaCard","props","pizza","id","description","image","ingredients","currentCurrency","addToOrder","removeFromOrder","Card","CardHeader","title","component","subheader","find","onClick","CardMedia","paddingTop","CardContent","PizzaList","useEffect","Grid","container","spacing","key","item","xs","sm","md","lg","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","basename","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4c447990.chunk.js","sourcesContent":["import * as types from './types.js';\n\nexport const CURRENCY = {\n  RUB: {\n    name: 'RUB',\n    sign: '₽',\n  },\n  USD: {\n    name: 'USD',\n    sign: '$',\n  },\n  EUR: {\n    name: 'EUR',\n    sign: '€',\n  },\n};\n\nexport const initialState = {\n  catalogue: [],\n  currency: CURRENCY.USD,\n  user: null,\n  delivery_cost: {},\n  order: [],\n};\n\nexport function reducer(state, action) {\n  const {type, payload} = action;\n\n  switch (type) {\n    case types.SET_CATALOGUE: {\n      return {\n        ...state,\n        catalogue: payload,\n      };\n    }\n\n    case types.ADD_TO_ORDER: {\n      const order = [...state.order];\n      const {pizza_id, price_RUB, price_USD, price_EUR} = payload;\n      order.push({\n        pizza_id,\n        count: 1,\n        price_RUB,\n        price_USD,\n        price_EUR,\n      });\n      return {\n        ...state,\n        order,\n      };\n    }\n\n    case types.REMOVE_FROM_ORDER: {\n      const order = [...state.order].filter(el => el.pizza_id !== payload);\n      return {\n        ...state,\n        order,\n      };\n    }\n    \n    case types.UPDATE_CURRENCY: {\n      return {\n        ...state,\n        currency: payload,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","export const SET_CATALOGUE = 'SET_CATALOGUE';\nexport const ADD_TO_ORDER = 'ADD_TO_ORDER';\nexport const REMOVE_FROM_ORDER = 'REMOVE_FROM_ORDER';\nexport const UPDATE_CURRENCY = 'UPDATE_CURRENCY';","import React, { createContext, useReducer } from 'react';\nimport {initialState, reducer} from './reducer';\n\nconst Context = createContext();\n\nfunction ContextProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <Context.Provider value={{state, dispatch}}>\n      {children}\n    </Context.Provider>\n  );\n}\n\nexport { ContextProvider, Context };","import { createMuiTheme } from '@material-ui/core/styles';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\nimport amber from '@material-ui/core/colors/amber';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: deepPurple[500],\n      contrastText: '#ffffff',\n    },\n    secondary: {main: amber.A400},\n  },\n});\n\nexport default theme;","import React, { useContext, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Context } from '../../context/Context';\nimport { CURRENCY } from '../../context/reducer';\nimport { UPDATE_CURRENCY } from '../../context/types';\n\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    background: 'inherit',\n    // border: '1px',\n    borderColor: theme.palette.secondary.main,\n    color: theme.palette.primary.contrastText,\n    '&$selected': {\n      backgroundColor: theme.palette.secondary.main,\n      color: theme.palette.primary.main,\n      fontWeight: 'bold',\n    },\n  },\n  label: {\n    color: theme.palette.primary.contrastText,\n  },\n  selected: {},\n}));\n\nfunction CurrenySelector() {\n  const { state, dispatch } = useContext(Context);\n  const { currency } = state;\n  const [selectedCurrency, setSelectedCurrency] = useState(currency.name);\n\n  const handleChange = (e, newCurrency) => {\n    if (newCurrency !== null) {\n      setSelectedCurrency(newCurrency);\n      dispatch({\n        type: UPDATE_CURRENCY,\n        payload: CURRENCY[newCurrency],\n      });\n    }\n  };\n\n  const classes = useStyles();\n\n  return (\n    <ToggleButtonGroup\n      size=\"small\" exclusive\n      aria-label=\"select currency\"\n      name=\"currency\"\n      value={selectedCurrency}\n      onChange={handleChange}\n    >\n      <ToggleButton\n        classes={{\n          root: classes.root,\n          label: classes.label,\n          selected: classes.selected,\n        }}\n        value={CURRENCY.RUB.name}\n        aria-label={CURRENCY.RUB.name}\n      >\n        {CURRENCY.RUB.name}\n      </ToggleButton>\n      <ToggleButton\n        classes={{\n          root: classes.root,\n          label: classes.label,\n          selected: classes.selected,\n        }}\n        value={CURRENCY.USD.name}\n        aria-label={CURRENCY.USD.name}\n      >\n        {CURRENCY.USD.name}\n      </ToggleButton>\n      <ToggleButton\n        classes={{\n          root: classes.root,\n          label: classes.label,\n          selected: classes.selected,\n        }}\n        value={CURRENCY.EUR.name}\n        aria-label={CURRENCY.EUR.name}\n      >\n        {CURRENCY.EUR.name}\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n\nexport default CurrenySelector;","import React, { useContext } from 'react';\nimport { Context } from '../../context/Context';\n\nimport { Link } from 'react-router-dom';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  IconButton,\n  Badge,\n} from '@material-ui/core';\nimport ShoppingCartOutlinedIcon from '@material-ui/icons/ShoppingCartOutlined';\nimport CurrencySelector from './CurrencySelector';\n\nfunction Header() {\n  const { state } = useContext(Context);\n  const badgeContent = state.order.length === 0 ? 0 : state.order.map(el => el.count).reduce((acc, cur) => acc + cur);\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Link to=\"/\" style={{color: 'inherit', flexGrow: 1, textDecoration: 'none'}}>\n          <Typography variant=\"h6\" style={{}}>\n            Pizza Delivery\n          </Typography>\n        </Link>\n        \n        <CurrencySelector />\n        <Button color=\"inherit\">Login</Button>\n        <Link to=\"/cart\" style={{color: 'inherit'}}>\n          <IconButton edge=\"end\" color=\"inherit\" aria-label=\"go to cart\">\n            <Badge badgeContent={badgeContent} color=\"secondary\">\n              <ShoppingCartOutlinedIcon />\n            </Badge>\n          </IconButton>\n        </Link>\n        \n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default Header;","const API_URL = 'https://my-json-server.typicode.com/tereshka/pizza-delivery';\n\nconst fetchApi = (url, options = {}) => {\n  return new Promise((resolve, reject) => {\n    fetch(url, options)\n      .then(response => {\n        if (response.status < 400) {\n          return response.json();\n        } else {\n          throw response;\n        }\n      })\n      .then(data => {\n        resolve(data);\n      })\n      .catch(res => {\n        // reject(response);\n        res.json().then(error => {\n          reject(error);\n        });\n      });\n  });\n};\n\nconst api = {\n  get(url) {\n    return fetchApi(`${API_URL}${url}`, {\n      mode: 'cors',\n      credentials: \"include\",\n      headers: {\n        'Content-type': 'application/json',\n        \n      },\n    });\n  },\n  post(url, options = {}) {\n    return fetchApi(`${API_URL}${url}`, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(options)\n    });\n  }\n};\n\nexport default api;","import React, { useContext } from 'react';\nimport { Context } from '../../context/Context';\nimport { CURRENCY } from '../../context/reducer';\nimport { ADD_TO_ORDER, REMOVE_FROM_ORDER } from '../../context/types';\n\nimport {\n  Card,\n  CardHeader,\n  CardMedia,\n  CardContent,\n  Typography,\n  IconButton,\n} from '@material-ui/core';\n\nimport ShoppingCartOutlinedIcon from '@material-ui/icons/ShoppingCartOutlined';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\n\nfunction PizzaCard(props) {\n  const { state, dispatch } = useContext(Context);\n  const {currency, order} = state;\n  const { id, name, description, image, ingredients, price_RUB, price_USD, price_EUR } = props.pizza;\n  \n  const currentCurrency = currency === CURRENCY.RUB\n    ? price_RUB\n    : currency === CURRENCY.USD\n      ? price_USD : price_EUR;\n\n  function cardTitle() {\n    return (\n      <>\n        <Typography variant=\"h6\" style={{ fontWeight: 'bold' }} component=\"span\">\n          {`${name}, `}\n        </Typography>\n        <Typography variant=\"h6\" color=\"primary\" component=\"span\">\n          {`${currentCurrency}${currency.sign}`}\n        </Typography>\n      </>\n    );\n  }\n\n  function cartIcon() {\n    const inCart = order.find(el => el.pizza_id === id);\n    if (inCart) {\n      return (\n        <IconButton aria-label=\"remove from cart\" onClick={removeFromOrder}>\n          <ShoppingCartIcon color=\"primary\" />\n        </IconButton>);\n    }\n    return (\n      <IconButton aria-label=\"add to cart\" onClick={addToOrder}>\n        <ShoppingCartOutlinedIcon />\n      </IconButton>);\n  }\n\n  function addToOrder() {\n    dispatch({\n      type: ADD_TO_ORDER,\n      payload: {\n        pizza_id: id,\n        price_RUB,\n        price_USD,\n        price_EUR,\n      },\n    });\n  }\n\n  function removeFromOrder() {\n    dispatch({\n      type: REMOVE_FROM_ORDER,\n      payload: id,\n    });\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        title={cardTitle()}\n        subheader={description}\n        action={\n          cartIcon()\n        }\n      />\n      <CardMedia\n        style={{paddingTop: '50%'}}\n        // className={classes.media}\n        image={image}\n        title={name}\n      />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {ingredients}\n        </Typography>\n        \n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PizzaCard;","import React, { useContext, useEffect } from 'react';\nimport { Context } from '../../context/Context';\nimport { SET_CATALOGUE } from '../../context/types';\nimport api from '../../api/api';\n\nimport Grid from '@material-ui/core/Grid';\nimport PizzaCard from './PizzaCard.jsx';\n\nfunction PizzaList() {\n  const { state, dispatch } = useContext(Context);\n  const { catalogue } = state;\n\n  const loadCatalogue = () => {\n    api.get('/pizza_list').then(data => {\n      dispatch({\n        type: SET_CATALOGUE,\n        payload: data,\n      });\n    });\n  };\n\n  useEffect(() => {\n    if (catalogue.length === 0) {\n      loadCatalogue();\n    }\n  }, []);\n\n  return (\n    <Grid container spacing={3}>\n      {\n        catalogue.map(el => (\n          <Grid  key={`pizza-${el.id}`} item xs={12} sm={6} md={4} lg={3} >\n            <PizzaCard pizza={el} />\n          </Grid>\n        ))\n      }\n    </Grid>\n  );\n};\n\nexport default PizzaList;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Header from './components/Header/Header.jsx';\nimport PizzaList from './components/PizzaList/PizzaList.jsx';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n    <Header />\n    <Switch>\n      <Route exact path=\"/\">\n        <PizzaList />\n      </Route>\n\n      <Route path=\"/cart\">\n        {/* <Cart /> */}\n      </Route>\n    </Switch>\n  </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { HashRouter as Router } from 'react-router-dom';\nimport { ContextProvider } from './context/Context';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme.js';\n\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ContextProvider>\n    <Router basename=\"/\">\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Router>\n  </ContextProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}